BODY {
	width: expression(documentElement.clientWidth < 300 ? (documentElement.clientWidth == 0 ? (body.clientWidth < 300 ? "300px" : "auto") : "300px") : "auto");
}
.top,.left,.right,.bottom,.content {
	filter	: expression((runtimeStyle.backgroundImage != 'none') ? runtimeStyle.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src='+currentStyle.backgroundImage.split('\"')[1]+', sizingMethod=scale)' : runtimeStyle.filter,runtimeStyle.backgroundImage = 'none');)			
}
.left_top,.right_top,.left_bottom,.right_bottom {
	filter	: expression(
		(runtimeStyle.filter == '') ? runtimeStyle.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src='+currentStyle.backgroundImage.split('\"')[1]+', sizingMethod=crop)' : runtimeStyle.filter,
		runtimeStyle.backgroundImage = 'none');
}
.top {
	width: expression( this.parentNode.clientWidth - 36 + 'px' ); 
}
.left {
	height: expression( this.parentNode.clientHeight - 36 + 'px' );   
}
.right {
	height: expression( this.parentNode.clientHeight - 36 + 'px' ); 
	left: auto;
	right:expression(this.parentNode.offsetWidth % 2 ? -1 : 0 );     
}
.bottom {
	width: expression( this.parentNode.clientWidth - 36 + 'px' );
	top:auto; 
	bottom: expression( this.parentNode.offsetHeight % 2 ? -1 : 0 ); 
}
.right_top {
	left: auto;
	right:expression(this.parentNode.offsetWidth % 2 ? -1 : 0 ); 
}
.left_bottom {
	top:auto; 
	bottom: expression( this.parentNode.offsetHeight % 2 ? -1 : 0 ); 
}
.right_bottom {
	left: auto;
	right:expression(this.parentNode.offsetWidth % 2 ? -1 : 0 ); 
	top:auto; 
	bottom: expression( this.parentNode.offsetHeight % 2 ? -1 : 0 ); 
}	
.content {
	zoom:1;
	z-index:1;
}